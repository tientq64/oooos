[[stylD]]

*, :before, :after
   box-sizing: border-box
   vertical-align: middle

html
   height: 100%

body
   height: 100%
   margin: 0
   font-family: "Droid Sans", sans-serif
   line-height: 1.25
   user-select: none
   cursor: default

img, a
   user-drag none

.Icon
   width: 1.25em
   height: 1.25em
   min-width: 1.25em
   display: inline-flex
   justify-content: center
   align-items: center
   pointer-events: none

.Icon--img
   object-fit: contain
   image-rendering: -webkit-optimize-contrast

.Button
   height: 30px
   padding: 0 8px
   border: 0
   border-radius: 6px
   display: inline-flex
   justify-content: center
   align-items: center
   gap: 8px
   font: inherit
   background: #0000
   box-shadow: inset 0 0 0 1px #0004

   &:hover
      background: #8884

for k, val in $nonGrayColors
   .Button--{k}
      background: val[2]
      color: #fff
      box-shadow: inset 0 0 0 1px #0008

      &:hover
            background: val[3]

      &.Button--basic
         background: none
         color: val[3]

         &:hover
            background: rgba(val[2], .4)

.Button--basic
   box-shadow: none

.Button--small
   height: 24px

.TextInput
   width: 200px
   height: 30px
   border-radius: 6px
   display: flex
   align-items: center
   overflow: hidden
   box-shadow: inset 0 0 0 1px #0004

   &:focus-within
      box-shadow: 0 0 0 1px $blue3, 0 0 0 4px rgba($blue3, .4)

.TextInput-leftIcon
   margin-left: 8px

   + .TextInput-input
      margin-left: -28px
      padding-left: 36px

.TextInput-rightIcon
   margin-right: 8px

.TextInput-input
   width: 100%
   height: 100%
   padding: 0 8px
   border: 0
   font: inherit
   background: #0000
   outline: 0

   &:has(+ .TextInput-rightIcon)
      margin-right: -28px
      padding-right: 36px

[[styl]]

#m
   .thumbnail
      padding: 4px
      border: 1px solid #0004
      border-radius: 6px

   props = {
      m: margin
      p: padding
   }
   for p, prop in props
      for s, sides in $sides3
         for size, z in $spaces
            .{p}{s}-{z}
               for side in sides
                  {prop}{side}: size
            if p == m and z
               .-{p}{s}-{z}
                  for side in sides
                     {prop}{side}: -(size)
         if p == m
            .{p}{s}-auto
               for side in sides
                  {prop}{side}: auto

   for val, i in 0 4px 6px 8px 16px 32px
      .rounded-{i}
         border-radius: val
   .rounded-pill
      border-radius: 9999px
   .rounded
      border-radius: 6px

   .row
      display: flex
   .column
      display: flex
      flex-direction: column

   for i in 1..12
      val = floor(i / 12 * 100%)
      :not(.column) > .col-{i}
         width: val
      .column > .col-{i}
         height: val
   .col
      flex: 1
   .col-0
      flex: initial

   .wrap
      flex-wrap: wrap
   .nowrap
      flex-wrap: nowrap

   :not(.column).start, .column.top
      justify-content: flex-start
   :not(.column).center, .column.middle
      justify-content: center
   :not(.column).end, .column.bottom
      justify-content: flex-end

   :not(.column).top, .column.start
      align-items: flex-start
   :not(.column).middle, .column.center
      align-items: center
   :not(.column).bottom, .column.end
      align-items: flex-end

   for val, i in $spaces
      .gap-{i}
         gap: val
   for val, i in $spaces
      .gap-x-{i}
         column-gap: val
      .gap-y-{i}
         row-gap: val

   .disabled
      opacity: .5
      pointer-events: none
